C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Main.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <ADuC841.h>
   2          #include <stdio.h>
   3          
   4          #include "netconfig.h"
*** WARNING C231 IN LINE 718 OF COBS_KIRALE.H: '_memset': attempt to redefine intrinsic function
   5          
   6          
   7          
   8          /**************** FPGA Communication Port: ********************/
   9          sbit TrigByte1N  = P0^7;                   
  10          sbit Ack1N       = P0^6;          
  11          sbit TrigByte2N  = P0^5;
  12          sbit Ack2N       = P0^4;
  13          sbit SelTrigger  = P0^3;
  14          sbit reset_fpga  = P0^0;
  15          /**************************************************************/
  16          
  17          unsigned char DATA_L;
  18          unsigned char DATA_H;
  19          unsigned int datain;
  20          unsigned int i;
  21          
  22          char cadena[512];
  23          uint8_t dato;
  24          unsigned char flag, c;
  25          
  26          unsigned int result,Temp,Hum, LDR, cuenta_temp, cuenta_hum; 
  27          
  28          unsigned int resulti[2];
  29          
  30          /***************** Timer Configuration: **************************/
  31          void _WS_Timer_Config(char value)
  32          {
  33   1              IEIP2   = 0xA4; // TIC Interruption enable
  34   1              SEC     = 0x00;
  35   1              HTHSEC  = 0x00;
  36   1              MIN             = 0x00;
  37   1              HOUR    = 0x00;
  38   1              INTVAL  = value;        //**(Config.)   
  39   1              TIMECON = 0x53;         // The timer interrupt each second **(Config.)  /* 0x43 = 1/128 seconds */
  40   1      }       
  41          /*****************************************************************/
  42          
  43          /***************** ADC Configuration: ****************************/
  44          void _WS_ADC_Config (void)
  45          {
  46   1              ADCCON1  = 0xAC;     // ADCCON1: ADC Configuration: 12 clock periods for each conversion.              
             -                                                       
  47   1              ADCCON2  = 0x03;     // Selects channel 3 & on demand conversion.  (LDR is connected to the ADC3)
  48   1      }
  49          /*****************************************************************/
  50          
  51          /***************** UART configuration: ***************************/
  52          void _WSN_UART841_config()
  53          {
C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 2   

  54   1              SCON = 0x52;//SCON: UART Serial Port Control Register   => Mode 1: 8-bit UART, variable baud rate
  55   1              PCON = 0x80;//PCON: power-saving options and general-purpose status flags => SMOD=1 (Double UART Baud Rat
             -e)
  56   1              
  57   1              TMOD = 0x21;//Timer 1 Set M1 for 8-bit autoreload timer, Timer 0 Set M0 16-bit 
  58   1              TH1 =  0xFA; // 115200 ADuC841        //TH1 holds a value which is to be reloaded into TL1 each time it o
             -verflows. (BaudRate = 19200 bps)
  59   1              TR1  = 1;   //Start timer 1
  60   1      
  61   1              TI  = 1;   //bit1(SCON): Serial Port Transmit Interrupt Flag.
  62   1              ES  = 0;        // Serial Port interruption disable
  63   1              ET1 = 0;        // Timer 1 Interruption Disable 
  64   1      
  65   1              EA  = 1;        // Global Enable Interruption Flag
  66   1      }
  67          /****************************************************************/
  68          
  69          /****************** ADC Conversion: *****************************/
  70          int _WSN_ADC_conversion()
  71          {
  72   1              unsigned int sensorData;
  73   1      
  74   1              //*** Sigle conversion:
  75   1              SCONV = 1;
  76   1              while (SCONV == 1);
  77   1      
  78   1              sensorData = ((ADCDATAH & 0x0F) * 0x0100) + ADCDATAL;
  79   1              
  80   1              SCONV = 0; // Conversion Flag
  81   1              
  82   1              return (sensorData);
  83   1      
  84   1      }
  85          /*****************************************************************/
  86          
  87          /****************** FPGA Initial config. *************************/
  88          void _WSN_ini_FPGA(void)
  89          { 
  90   1                 TrigByte1N  = 1;                
  91   1                 TrigByte2N  = 1;
  92   1                 SelTrigger  = 0;
  93   1                 reset_fpga  = 1;
  94   1      }
  95          /****************** FPGA-DATA capture: **************************/
  96          int _WSN_FPGA(bit sensorSelector)
  97          {     
  98   1         unsigned int fpga_data;
  99   1               
 100   1         SelTrigger  = sensorSelector;
 101   1         TrigByte1N = 0; 
 102   1         while (Ack1N == 1){};
 103   1         
 104   1         DATA_L = P2;            // LSB
 105   1         TrigByte1N = 1;         // Release Trigger1
 106   1          
 107   1         TrigByte2N = 0;         //Trigger second data byte
 108   1         while (Ack2N == 1){};
 109   1         
 110   1         DATA_H = P2;           // MSB
 111   1         TrigByte2N = 1;    // Release Trigger2
 112   1      
 113   1      
C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 3   

 114   1         fpga_data = DATA_L + 256*(int)DATA_H;
 115   1      
 116   1         return(fpga_data);  
 117   1         
 118   1      }
 119          /*****************************************************************/
 120                                                                                                                                                  
 121          /***************** Timer Interruption: ***************************/
 122          void _WSN_interrupt_TimeInterval() interrupt 10 using 3 
 123          { 
 124   1         //unsigned int result,Temp,Hum,LDR,Axis;
 125   1      
 126   1            /** DO NOT EDIT *********/
 127   1                 c++;
 128   1                 if (c==2){
 129   2                   reset_fpga = 0;
 130   2                       reset_fpga = 1;
 131   2                       c = 0;
 132   2                 }   
 133   1                /************************/
 134   1         
 135   1         
 136   1         flag = 1;
 137   1      
 138   1            
 139   1      }
 140          /*****************************************************************/
 141          
 142          /***************** Sensors reading functionalities: ***************/
 143          void _WSN_sensors_reading(void){
 144   1      
 145   1         int result[2], i;
 146   1         int estado;
 147   1         static int cuenta = 0;
 148   1         cuenta++;
 149   1      
 150   1              /** _WSN_FPGA(0) = Temperature, ACC Y **/
 151   1              if(cuenta%cuenta_temp == 0)
 152   1              {
 153   2                      result[0] = _WSN_FPGA(0); 
 154   2                      Temp = (result[0] - (273.15*100)); 
 155   2                      printf("La temperatura son %.2f grados celsius\n", ((float)Temp)/100);
 156   2                      if(Temp>=25)
 157   2                              estado = 1;
 158   2                      else if(Temp<25)
 159   2                              estado = 2;
 160   2              }
 161   1      
 162   1              for(i=0;i<100;i++);
 163   1      
 164   1              /** _WSN_FPGA(1) = Humidity, ACC X **/ 
 165   1              if(cuenta%cuenta_hum == 0)
 166   1              {
 167   2                      result[1] = _WSN_FPGA(1);  
 168   2              Hum =  ( (result[1]*127.0)/100 );  
 169   2                      printf("Hay una humedad del %.2f %c\n", ((float)Hum)/100,37);   
 170   2              }
 171   1      
 172   1      
 173   1         /************ Temp: ******************/
 174   1         // the temperature value taken from the FPGA has     to be
 175   1         // substracted from 27315 in order to show Degree Celsius x 100                              
C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 4   

 176   1         // Ej: Temp =  ( result - (273.15*100) );      // Degree Celsius x 100
 177   1         // c = 0;
 178   1         /*************************************/
 179   1              
 180   1      
 181   1         /************ Humidity ***************/
 182   1         // the humidity value taken form the FPGA has to be multipled
 183   1         // by 127.5 and divided by 100 in order to show H% x 100.
 184   1         // Ej: Hum =  ( (result*127.0)/100 );
 185   1         // c = 0;
 186   1         /*************************************/
 187   1      
 188   1      
 189   1         /************ Light: ******************/
 190   1      
 191   1         /**************************************/     
 192   1      
 193   1      
 194   1      }
 195          /*****************************************************************/
 196          
 197          /****************** ZigBee read: *********************************/
 198          /** ASCII  = Value of the character to wait.
 199          /** getsmj = It allows to get caracters from the serial port and 
 200          /** print them until ASCII arrives. 
 201          **/
 202          
 203          void _WSN_wait_answer(char ASCII,char getmsj)
 204          {  
 205   1              unsigned char serial_read,enable;
 206   1      
 207   1              enable = 1;
 208   1        
 209   1                   do
 210   1                      {
 211   2                              serial_read = _getkey(); 
 212   2              
 213   2                              if (serial_read == ASCII) 
 214   2                              {                                                                                        
 215   3                                      enable = 0;
 216   3                              }
 217   2                              else if (getmsj == 1)
 218   2                              {
 219   3                                      putchar(serial_read);
 220   3                              }                       
 221   2                      }while (enable != 0);
 222   1      }
 223          /**************** ZigBee Configuration: ************************/
 224          void _WSN_ZigBee_config(char type)
 225          {       
 226   1              printf("ATS00=0004\r");
 227   1              _WSN_wait_answer('O',0);
 228   1              _WSN_wait_answer('K',0);
 229   1      
 230   1              printf("ATS02=0003\r");
 231   1              _WSN_wait_answer('O',0);
 232   1              _WSN_wait_answer('K',0);
 233   1      
 234   1              printf("ATS03=0000000000000003\r");
 235   1              _WSN_wait_answer('O',0);
 236   1              _WSN_wait_answer('K',0);
 237   1      
C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 5   

 238   1              printf("AT+JN\r");
 239   1              _WSN_wait_answer('O',0);
 240   1              _WSN_wait_answer('K',0);
 241   1              
 242   1      }
*** WARNING C280 IN LINE 224 OF MAIN.C: 'type': unreferenced local variable
 243          /******************* Message Detection: *************************/
 244          void _WSN_message_detect()
 245          {  
 246   1              _WSN_wait_answer('U',0);
 247   1              _WSN_wait_answer(':',0);
 248   1              _WSN_wait_answer(',',1);
 249   1               putchar('\t');
 250   1              _WSN_wait_answer('=',0);
 251   1              _WSN_wait_answer(0x03,1); 
 252   1      }
 253          /******************* Main Function: *****************************/
 254          void main()
 255          {
 256   1        
 257   1         //---- Peripheral Configurations: -------------
 258   1      
 259   1         c = 0;
 260   1         flag = 0;
 261   1         _WS_Timer_Config(1);
 262   1         _WS_ADC_Config();
 263   1         _WSN_UART841_config();
 264   1         _WSN_ini_FPGA();
 265   1         //entrada cuenta humedad y temperatura por defecto
 266   1         cuenta_temp = 1;
 267   1         cuenta_hum = 5;
 268   1         //_WSN_ZigBee_config('a');
 269   1      
 270   1         // --------------------------------------------
 271   1              printf("Introduce los tiempos de cada sensor: \n");
 272   1              printf("T = \n");
 273   1              //scanf("%d",&cuenta_temp);
 274   1              printf("H = \n");
 275   1              //scanf("%d",&cuenta_hum);
 276   1              //send(ComClear, (sizeof(ComClear)/sizeof(ComClear[0])));
 277   1              
 278   1              i = 0;
 279   1              
 280   1              send(Role, (sizeof(Role)/sizeof(Role[0])));
 281   1              //receive();
 282   1              while(i<512)
 283   1              {
 284   2                      cadena[i]=getchar();
 285   2                      i++;
 286   2              }
 287   1              printf(cadena);
 288   1                 printf ("\nConnected\n\r");                             
 289   1      
 290   1                 while (1)
 291   1                 {
 292   2                         if (flag == 1){
 293   3      
 294   3                              //send(ComClear, (sizeof(ComClear)/sizeof(ComClear[0])));       
 295   3      
 296   3                              flag = 0;
 297   3      
 298   3                      }                               
C51 COMPILER V8.08   MAIN                                                                  05/12/2021 20:33:36 PAGE 6   

 299   2                                                
 300   2                 }
 301   1      
 302   1      }
 303          /****************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   5433    ----
   CONSTANT SIZE    =    293    ----
   XDATA SIZE       =    908    1214
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  2 WARNING(S),  0 ERROR(S)
