C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN Main.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Main.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <ADuC841.h>
   2          #include <stdio.h>
   3          
   4          #include "netconfig.h"
*** WARNING C231 IN LINE 718 OF COBS_KIRALE.H: '_memset': attempt to redefine intrinsic function
   5          
   6          
   7          
   8          /**************** FPGA Communication Port: ********************/
   9          sbit TrigByte1N  = P0^7;                   
  10          sbit Ack1N       = P0^6;          
  11          sbit TrigByte2N  = P0^5;
  12          sbit Ack2N       = P0^4;
  13          sbit SelTrigger  = P0^3;
  14          sbit reset_fpga  = P0^0;
  15          /**************************************************************/
  16          
  17          unsigned char DATA_L;
  18          unsigned char DATA_H;
  19          unsigned int datain;
  20          unsigned int i;
  21          string leido;
*** ERROR C129 IN LINE 21 OF MAIN.C: missing ';' before 'leido'
  22          
  23          char cadena[512];
  24          uint8_t dato;
  25          unsigned char flag, c;
  26          
  27          unsigned int result,Temp,Hum, LDR, cuenta_temp, cuenta_hum; 
  28          
  29          unsigned int resulti[2];
  30          
  31          /***************** Timer Configuration: **************************/
  32          void _WS_Timer_Config(char value)
  33          {
  34                  IEIP2   = 0xA4; // TIC Interruption enable
  35                  SEC     = 0x00;
  36                  HTHSEC  = 0x00;
  37                  MIN             = 0x00;
  38                  HOUR    = 0x00;
  39                  INTVAL  = value;        //**(Config.)   
  40                  TIMECON = 0x53;         // The timer interrupt each second **(Config.)  /* 0x43 = 1/128 seconds */
  41          }       
  42          /*****************************************************************/
  43          
  44          /***************** ADC Configuration: ****************************/
  45          void _WS_ADC_Config (void)
  46          {
  47                  ADCCON1  = 0xAC;     // ADCCON1: ADC Configuration: 12 clock periods for each conversion.              
             -                                                       
  48                  ADCCON2  = 0x03;     // Selects channel 3 & on demand conversion.  (LDR is connected to the ADC3)
  49          }
  50          /*****************************************************************/
  51          
  52          /***************** UART configuration: ***************************/
C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 2   

  53          void _WSN_UART841_config()
  54          {
  55                  SCON = 0x52;//SCON: UART Serial Port Control Register   => Mode 1: 8-bit UART, variable baud rate
  56                  PCON = 0x80;//PCON: power-saving options and general-purpose status flags => SMOD=1 (Double UART Baud Rat
             -e)
  57                  
  58                  TMOD = 0x21;//Timer 1 Set M1 for 8-bit autoreload timer, Timer 0 Set M0 16-bit 
  59                  TH1 =  0xFA; // 115200 ADuC841        //TH1 holds a value which is to be reloaded into TL1 each time it o
             -verflows. (BaudRate = 19200 bps)
  60                  TR1  = 1;   //Start timer 1
  61          
  62                  TI  = 1;   //bit1(SCON): Serial Port Transmit Interrupt Flag.
  63                  ES  = 0;        // Serial Port interruption disable
  64                  ET1 = 0;        // Timer 1 Interruption Disable 
  65          
  66                  EA  = 1;        // Global Enable Interruption Flag
  67          }
  68          /****************************************************************/
  69          
  70          /****************** ADC Conversion: *****************************/
  71          int _WSN_ADC_conversion()
  72          {
  73                  unsigned int sensorData;
  74          
  75                  //*** Sigle conversion:
  76                  SCONV = 1;
  77                  while (SCONV == 1);
  78          
  79                  sensorData = ((ADCDATAH & 0x0F) * 0x0100) + ADCDATAL;
  80                  
  81                  SCONV = 0; // Conversion Flag
  82                  
  83                  return (sensorData);
  84          
  85          }
  86          /*****************************************************************/
  87          
  88          /****************** FPGA Initial config. *************************/
  89          void _WSN_ini_FPGA(void)
  90          { 
  91                     TrigByte1N  = 1;                
  92                     TrigByte2N  = 1;
  93                     SelTrigger  = 0;
  94                     reset_fpga  = 1;
  95          }
  96          /****************** FPGA-DATA capture: **************************/
  97          int _WSN_FPGA(bit sensorSelector)
  98          {     
  99             unsigned int fpga_data;
 100                   
 101             SelTrigger  = sensorSelector;
 102             TrigByte1N = 0; 
 103             while (Ack1N == 1){};
 104             
 105             DATA_L = P2;            // LSB
 106             TrigByte1N = 1;         // Release Trigger1
 107              
 108             TrigByte2N = 0;         //Trigger second data byte
 109             while (Ack2N == 1){};
 110             
 111             DATA_H = P2;           // MSB
 112             TrigByte2N = 1;    // Release Trigger2
C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 3   

 113          
 114          
 115             fpga_data = DATA_L + 256*(int)DATA_H;
 116          
 117             return(fpga_data);  
 118             
 119          }
 120          /*****************************************************************/
 121                                                                                                                                                  
 122          /***************** Timer Interruption: ***************************/
 123          void _WSN_interrupt_TimeInterval() interrupt 10 using 3 
 124          { 
 125             //unsigned int result,Temp,Hum,LDR,Axis;
 126          
 127                /** DO NOT EDIT *********/
 128                     c++;
 129                     if (c==2){
 130                       reset_fpga = 0;
 131                           reset_fpga = 1;
 132                           c = 0;
 133                     }   
 134                    /************************/
 135             
 136             
 137             flag = 1;
 138          
 139                
 140          }
 141          /*****************************************************************/
 142          
 143          /***************** Sensors reading functionalities: ***************/
 144          void _WSN_sensors_reading(void){
 145          
 146             int result[2], i;
 147             int estado;
 148             static int cuenta = 0;
 149             cuenta++;
 150          
 151                  /** _WSN_FPGA(0) = Temperature, ACC Y **/
 152                  if(cuenta%cuenta_temp == 0)
 153                  {
 154                          result[0] = _WSN_FPGA(0); 
 155                          Temp = (result[0] - (273.15*100)); 
 156                          printf("La temperatura son %.2f grados celsius\n", ((float)Temp)/100);
 157                          if(Temp>=25)
 158                                  estado = 1;
 159                          else if(Temp<25)
 160                                  estado = 2;
 161                  }
 162          
 163                  for(i=0;i<100;i++);
 164          
 165                  /** _WSN_FPGA(1) = Humidity, ACC X **/ 
 166                  if(cuenta%cuenta_hum == 0)
 167                  {
 168                          result[1] = _WSN_FPGA(1);  
 169                  Hum =  ( (result[1]*127.0)/100 );  
 170                          printf("Hay una humedad del %.2f %c\n", ((float)Hum)/100,37);   
 171                  }
 172          
 173          
 174             /************ Temp: ******************/
C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 4   

 175             // the temperature value taken from the FPGA has     to be
 176             // substracted from 27315 in order to show Degree Celsius x 100                              
 177             // Ej: Temp =  ( result - (273.15*100) );      // Degree Celsius x 100
 178             // c = 0;
 179             /*************************************/
 180                  
 181          
 182             /************ Humidity ***************/
 183             // the humidity value taken form the FPGA has to be multipled
 184             // by 127.5 and divided by 100 in order to show H% x 100.
 185             // Ej: Hum =  ( (result*127.0)/100 );
 186             // c = 0;
 187             /*************************************/
 188          
 189          
 190             /************ Light: ******************/
 191          
 192             /**************************************/     
 193          
 194          
 195          }
 196          /*****************************************************************/
 197          
 198          /****************** ZigBee read: *********************************/
 199          /** ASCII  = Value of the character to wait.
 200          /** getsmj = It allows to get caracters from the serial port and 
 201          /** print them until ASCII arrives. 
 202          **/
 203          
 204          void _WSN_wait_answer(char ASCII,char getmsj)
 205          {  
 206                  unsigned char serial_read,enable;
 207          
 208                  enable = 1;
 209            
 210                       do
 211                          {
 212                                  serial_read = _getkey(); 
 213                  
 214                                  if (serial_read == ASCII) 
 215                                  {                                                                                        
 216                                          enable = 0;
 217                                  }
 218                                  else if (getmsj == 1)
 219                                  {
 220                                          putchar(serial_read);
 221                                  }                       
 222                          }while (enable != 0);
 223          }
 224          /**************** ZigBee Configuration: ************************/
 225          void _WSN_ZigBee_config(char type)
 226          {       
 227                  printf("ATS00=0004\r");
 228                  _WSN_wait_answer('O',0);
 229                  _WSN_wait_answer('K',0);
 230          
 231                  printf("ATS02=0003\r");
 232                  _WSN_wait_answer('O',0);
 233                  _WSN_wait_answer('K',0);
 234          
 235                  printf("ATS03=0000000000000003\r");
 236                  _WSN_wait_answer('O',0);
C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 5   

 237                  _WSN_wait_answer('K',0);
 238          
 239                  printf("AT+JN\r");
 240                  _WSN_wait_answer('O',0);
 241                  _WSN_wait_answer('K',0);
 242                  
 243          }
 244          /******************* Message Detection: *************************/
 245          void _WSN_message_detect()
 246          {  
 247                  _WSN_wait_answer('U',0);
 248                  _WSN_wait_answer(':',0);
 249                  _WSN_wait_answer(',',1);
 250                   putchar('\t');
 251                  _WSN_wait_answer('=',0);
 252                  _WSN_wait_answer(0x03,1); 
 253          }
 254          /******************* Main Function: *****************************/
 255          void main()
 256          {
 257            
 258             //---- Peripheral Configurations: -------------
 259          
 260             c = 0;
 261             flag = 0;
 262             _WS_Timer_Config(1);
 263             _WS_ADC_Config();
 264             _WSN_UART841_config();
 265             _WSN_ini_FPGA();
 266             //entrada cuenta humedad y temperatura por defecto
 267             cuenta_temp = 1;
 268             cuenta_hum = 5;
 269             //_WSN_ZigBee_config('a');
 270          
 271             // --------------------------------------------
 272                  printf("Introduce los tiempos de cada sensor: \n");
 273                  printf("T = \n");
 274                  //scanf("%d",&cuenta_temp);
 275                  printf("H = \n");
 276                  //scanf("%d",&cuenta_hum);
 277                  //send(ComClear, (sizeof(ComClear)/sizeof(ComClear[0])));
 278                  
 279                  i = 0;
 280                  send(Role, (sizeof(Role)/sizeof(Role[0])));
 281                  while(cadena[i]= getkey())
 282                  {
 283                          i++;
 284                  }
 285                  i=0;
 286                  printf("\n");
 287                  printf("\n");
 288          
 289                  i=0;
 290                  send(WriteChannel, (sizeof(WriteChannel)/sizeof(WriteChannel[0])));
 291                  while(cadena[i]= getkey())
 292                  {
 293                          
 294                          i++;
 295                  }
 296                  i=0;
 297                  printf("\n");
 298                  while(i<6)
C51 COMPILER V8.08   MAIN                                                                  05/18/2021 19:23:18 PAGE 6   

 299                  {
 300                          printf("%d",cadena[i]);
 301                          i++;
 302                  }
 303                  printf("\n");
 304                  printf ("\nConnected\n\r");                                
 305          
 306                  while (1)
 307                  {
 308                     if (flag == 1){
 309          
 310                          //send(ComClear, (sizeof(ComClear)/sizeof(ComClear[0])));       
 311          
 312                          flag = 0;
 313          
 314                          }                               
 315                                                            
 316                  }
 317          
 318          }
 319          /****************************************************************/

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
