C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 1   


C51 COMPILER V8.08, COMPILATION OF MODULE TEMPLATE_DEMO
OBJECT MODULE PLACED IN Template_demo.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE Template_demo.c LARGE BROWSE DEBUG OBJECTEXTEND

line level    source

   1          #include <ADuC841.h>
   2          #include <stdio.h>
   3          
   4          /**************** FPGA Communication Port: ********************/
   5          sbit TrigByte1N  = P0^7;                   
   6          sbit Ack1N       = P0^6;          
   7          sbit TrigByte2N  = P0^5;
   8          sbit Ack2N       = P0^4;
   9          sbit SelTrigger  = P0^3;
  10          sbit reset_fpga  = P0^0;
  11          /**************************************************************/
  12          
  13          unsigned char DATA_L;
  14          unsigned char DATA_H;
  15          unsigned int datain;
  16          
  17          unsigned char flag, c;
  18          
  19          unsigned int result,Temp,Hum, LDR, cuenta_temp, cuenta_hum; 
  20          
  21          unsigned int resulti[2];
  22          
  23          /***************** Timer Configuration: **************************/
  24          void _WS_Timer_Config(char value)
  25          {
  26   1              IEIP2   = 0xA4; // TIC Interruption enable
  27   1              SEC     = 0x00;
  28   1              HTHSEC  = 0x00;
  29   1              MIN             = 0x00;
  30   1              HOUR    = 0x00;
  31   1              INTVAL  = value;        //**(Config.)   
  32   1              TIMECON = 0x53;         // The timer interrupt each second **(Config.)  /* 0x43 = 1/128 seconds */
  33   1      }       
  34          /*****************************************************************/
  35          
  36          /***************** ADC Configuration: ****************************/
  37          void _WS_ADC_Config (void)
  38          {
  39   1              ADCCON1  = 0xAC;     // ADCCON1: ADC Configuration: 12 clock periods for each conversion.              
             -                                                       
  40   1              ADCCON2  = 0x03;     // Selects channel 3 & on demand conversion.  (LDR is connected to the ADC3)
  41   1      }
  42          /*****************************************************************/
  43          
  44          /***************** UART configuration: ***************************/
  45          void _WSN_UART841_config()
  46          {
  47   1              SCON = 0x52;//SCON: UART Serial Port Control Register   => Mode 1: 8-bit UART, variable baud rate
  48   1              PCON = 0x80;//PCON: power-saving options and general-purpose status flags => SMOD=1 (Double UART Baud Rat
             -e)
  49   1              
  50   1              TMOD = 0x21;//Timer 1 Set M1 for 8-bit autoreload timer, Timer 0 Set M0 16-bit 
  51   1              TH1  = 0xDC;// 19200 ADuC841        //TH1 holds a value which is to be reloaded into TL1 each time it ove
             -rflows. (BaudRate = 19200 bps)
  52   1              TR1  = 1;   //Start timer 1
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 2   

  53   1      
  54   1              TI  = 1;   //bit1(SCON): Serial Port Transmit Interrupt Flag.
  55   1              ES  = 0;        // Serial Port interruption disable
  56   1              ET1 = 0;        // Timer 1 Interruption Disable 
  57   1      
  58   1              EA  = 1;        // Global Enable Interruption Flag
  59   1      }
  60          /****************************************************************/
  61          
  62          /****************** ADC Conversion: *****************************/
  63          int _WSN_ADC_conversion()
  64          {
  65   1              unsigned int sensorData;
  66   1      
  67   1              //*** Sigle conversion:
  68   1              SCONV = 1;
  69   1              while (SCONV == 1);
  70   1      
  71   1              sensorData = ((ADCDATAH & 0x0F) * 0x0100) + ADCDATAL;
  72   1              
  73   1              SCONV = 0; // Conversion Flag
  74   1              
  75   1              return (sensorData);
  76   1      
  77   1      }
  78          /*****************************************************************/
  79          
  80          /****************** FPGA Initial config. *************************/
  81          void _WSN_ini_FPGA(void)
  82          { 
  83   1                 TrigByte1N  = 1;                
  84   1                 TrigByte2N  = 1;
  85   1                 SelTrigger  = 0;
  86   1                 reset_fpga  = 1;
  87   1      }
  88          /****************** FPGA-DATA capture: **************************/
  89          int _WSN_FPGA(bit sensorSelector)
  90          {     
  91   1         unsigned int fpga_data;
  92   1               
  93   1         SelTrigger  = sensorSelector;
  94   1         TrigByte1N = 0; 
  95   1         while (Ack1N == 1){};
  96   1         
  97   1         DATA_L = P2;            // LSB
  98   1         TrigByte1N = 1;         // Release Trigger1
  99   1          
 100   1         TrigByte2N = 0;         //Trigger second data byte
 101   1         while (Ack2N == 1){};
 102   1         
 103   1         DATA_H = P2;           // MSB
 104   1         TrigByte2N = 1;    // Release Trigger2
 105   1      
 106   1      
 107   1         fpga_data = DATA_L + 256*(int)DATA_H;
 108   1      
 109   1         return(fpga_data);  
 110   1         
 111   1      }
 112          /*****************************************************************/
 113                                                                                                                                                  
 114          /***************** Timer Interruption: ***************************/
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 3   

 115          void _WSN_interrupt_TimeInterval() interrupt 10 using 3 
 116          { 
 117   1         //unsigned int result,Temp,Hum,LDR,Axis;
 118   1      
 119   1            /** DO NOT EDIT *********/
 120   1                 c++;
 121   1                 if (c==2){
 122   2                   reset_fpga = 0;
 123   2                       reset_fpga = 1;
 124   2                       c = 0;
 125   2                 }   
 126   1                /************************/
 127   1         
 128   1         
 129   1         flag = 1;
 130   1      
 131   1            
 132   1      }
 133          /*****************************************************************/
 134          
 135          /***************** Sensors reading functionalities: ***************/
 136          void _WSN_sensors_reading(void){
 137   1      
 138   1         int result[2], i;
 139   1         int estado;
 140   1         static int cuenta = 0;
 141   1         cuenta++;
 142   1      
 143   1              /** _WSN_FPGA(0) = Temperature, ACC Y **/
 144   1              if(cuenta%cuenta_temp == 0)
 145   1              {
 146   2                      result[0] = _WSN_FPGA(0); 
 147   2                      Temp = (result[0] - (273.15*100)); 
 148   2                      printf("La temperatura son %.2f grados celsius\n", ((float)Temp)/100);
 149   2                      if(Temp>=25)
 150   2                              estado = 1;
 151   2                      else if(Temp<25)
 152   2                              estado = 2;
 153   2              }
 154   1      
 155   1              for(i=0;i<100;i++);
 156   1      
 157   1              /** _WSN_FPGA(1) = Humidity, ACC X **/ 
 158   1              if(cuenta%cuenta_hum == 0)
 159   1              {
 160   2                      result[1] = _WSN_FPGA(1);  
 161   2              Hum =  ( (result[1]*127.0)/100 );  
 162   2                      printf("Hay una humedad del %.2f %c\n", ((float)Hum)/100,37);   
 163   2              }
 164   1      
 165   1      
 166   1         /************ Temp: ******************/
 167   1         // the temperature value taken from the FPGA has     to be
 168   1         // substracted from 27315 in order to show Degree Celsius x 100                              
 169   1         // Ej: Temp =  ( result - (273.15*100) );      // Degree Celsius x 100
 170   1         // c = 0;
 171   1         /*************************************/
 172   1              
 173   1      
 174   1         /************ Humidity ***************/
 175   1         // the humidity value taken form the FPGA has to be multipled
 176   1         // by 127.5 and divided by 100 in order to show H% x 100.
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 4   

 177   1         // Ej: Hum =  ( (result*127.0)/100 );
 178   1         // c = 0;
 179   1         /*************************************/
 180   1      
 181   1      
 182   1         /************ Light: ******************/
 183   1      
 184   1         /**************************************/     
 185   1      
 186   1      
 187   1      }
 188          /*****************************************************************/
 189          
 190          /****************** ZigBee read: *********************************/
 191          /** ASCII  = Value of the character to wait.
 192          /** getsmj = It allows to get caracters from the serial port and 
 193          /** print them until ASCII arrives. 
 194          **/
 195          
 196          void _WSN_wait_answer(char ASCII,char getmsj)
 197          {  
 198   1              unsigned char serial_read,enable;
 199   1      
 200   1              enable = 1;
 201   1        
 202   1                   do
 203   1                      {
 204   2                              serial_read = _getkey(); 
 205   2              
 206   2                              if (serial_read == ASCII) 
 207   2                              {                                                                                        
 208   3                                      enable = 0;
 209   3                              }
 210   2                              else if (getmsj == 1)
 211   2                              {
 212   3                                      putchar(serial_read);
 213   3                              }                       
 214   2                      }while (enable != 0);
 215   1      }
 216          /**************** ZigBee Configuration: ************************/
 217          void _WSN_ZigBee_config(char type)
 218          {       
 219   1              printf("ATS00=0004\r");
 220   1              _WSN_wait_answer('O',0);
 221   1              _WSN_wait_answer('K',0);
 222   1      
 223   1              printf("ATS02=0003\r");
 224   1              _WSN_wait_answer('O',0);
 225   1              _WSN_wait_answer('K',0);
 226   1      
 227   1              printf("ATS03=0000000000000003\r");
 228   1              _WSN_wait_answer('O',0);
 229   1              _WSN_wait_answer('K',0);
 230   1      
 231   1              printf("AT+JN\r");
 232   1              _WSN_wait_answer('O',0);
 233   1              _WSN_wait_answer('K',0);
 234   1              
 235   1      }
*** WARNING C280 IN LINE 217 OF TEMPLATE_DEMO.C: 'type': unreferenced local variable
 236          /******************* Message Detection: *************************/
 237          void _WSN_message_detect()
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 5   

 238          {  
 239   1              _WSN_wait_answer('U',0);
 240   1              _WSN_wait_answer(':',0);
 241   1              _WSN_wait_answer(',',1);
 242   1               putchar('\t');
 243   1              _WSN_wait_answer('=',0);
 244   1              _WSN_wait_answer(0x03,1); 
 245   1      }
 246          /******************* Main Function: *****************************/
 247          void main()
 248          {
 249   1        
 250   1         //---- Peripheral Configurations: -------------
 251   1      
 252   1         c = 0;
 253   1         flag = 0;
 254   1         _WS_Timer_Config(1);
 255   1         _WS_ADC_Config();
 256   1         _WSN_UART841_config();
 257   1         _WSN_ini_FPGA();
 258   1         //entrada cuenta humedad y temperatura por defecto
 259   1         cuenta_temp = 1;
 260   1         cuenta_hum = 5;
 261   1         //_WSN_ZigBee_config('a');
 262   1      
 263   1         // --------------------------------------------
 264   1              printf("Introduce los tiempos de cada sensor: \n");
 265   1              printf("T = \n");
 266   1              scanf("%d",&cuenta_temp);
 267   1              printf("H = \n");
 268   1              scanf("%d",&cuenta_hum);
 269   1      
 270   1                 printf ("Connected\n\r");                               
 271   1      
 272   1                 while (1)
 273   1                 {
 274   2                         if (flag == 1){
 275   3      
 276   3                              _WSN_sensors_reading();
 277   3      
 278   3                              /********* SHT11 Sensor Layer *************************/
 279   3                       
 280   3                          /*******************************************************/
 281   3                              
 282   3                              /********* ACC Sensor layer **************************
 283   3      
 284   3                              /*****************************************************/                 
 285   3      
 286   3                              flag = 0;
 287   3      
 288   3                      }                               
 289   2                                                
 290   2                 }
 291   1      
 292   1      }
 293          /****************************************************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    762    ----
   CONSTANT SIZE    =    191    ----
   XDATA SIZE       =     24      10
C51 COMPILER V8.08   TEMPLATE_DEMO                                                         04/21/2021 19:16:12 PAGE 6   

   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
